package cn.krt.zbcg.system.web.action;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.ssi.struts.action.SSIDispatchAction;

import cn.krt.zbcg.commons.bo.system.ZhaobiaojinduBO;


public class ExcelexportAction extends SSIDispatchAction{

	
	
	private static final String CONTENT_TYPE = "application/vnd.ms-excel"; 
	
	private void setSheetCellValue(HSSFSheet sheet, int rowIndex, int colIndex,  
            Object value,int cellType) {  
		if(value==null) return;
        // HSSFComment conment=sheet.getCellComment(rowIndex, colIndex);   
        HSSFRow row = sheet.getRow(rowIndex);  
        HSSFCell cell = row.getCell(colIndex, Row.CREATE_NULL_AS_BLANK );  
        cell.setCellType(cellType);  
        switch (cell.getCellType()) {  
        case Cell.CELL_TYPE_STRING:  
            cell.setCellValue(value.toString());  
            break;  
        case Cell.CELL_TYPE_NUMERIC:  
            cell.setCellValue(Integer.parseInt(value.toString()));  
            break;  
        default:  
            cell.setCellValue(value.toString());  
        }  
    }  
	private String generateTodayStr(){
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
		return sdf.format(new Date());
	}
	
	
	private  HSSFWorkbook getWb(String filename) throws FileNotFoundException{
		try {
				File file = new File(filename);
				FileInputStream fis = new FileInputStream(filename);
				HSSFWorkbook wb = new HSSFWorkbook(fis);;
				return wb;
		} catch (Exception e) {

			e.printStackTrace();
		}
		return null;
	}
	
	private void writeShqd(HSSFWorkbook wb,List list){
		if(list==null ||list.size()==0){
			return ;
		}
		ZhaobiaojinduBO  firstbo = (ZhaobiaojinduBO) list.get(0);
		
		HSSFSheet sheet = wb.getSheet("sheet1");
		setSheetCellValue(sheet,1,3,generateTodayStr(),Cell.CELL_TYPE_STRING);
		
		setSheetCellValue(sheet,2,3,firstbo.getGonghuoshang(),Cell.CELL_TYPE_STRING);
		
		setSheetCellValue(sheet,3,3,firstbo.getLianxiren(),Cell.CELL_TYPE_STRING);
		
		setSheetCellValue(sheet,4,3,firstbo.getDanjia(),Cell.CELL_TYPE_STRING);
		setSheetCellValue(sheet,5,3,firstbo.getZhibaojinjnrq(),Cell.CELL_TYPE_STRING);
		
		setSheetCellValue(sheet,3,8,firstbo.getKaibiaoriqi(),Cell.CELL_TYPE_STRING);
		setSheetCellValue(sheet,4,8,firstbo.getZcjdhrq(),Cell.CELL_TYPE_STRING);
		int starRow = 8;
	      
	     for(int i=0;i<list.size();i++){
	    	 ZhaobiaojinduBO  bo = (ZhaobiaojinduBO) list.get(i);
	    	 setSheetCellValue(sheet,starRow,2,bo.getPinming(),Cell.CELL_TYPE_STRING);
	    	 setSheetCellValue(sheet,starRow,3,bo.getShuliang(),Cell.CELL_TYPE_STRING);
	     	 setSheetCellValue(sheet,starRow,4,bo.getChandi(),Cell.CELL_TYPE_STRING);
	       	 setSheetCellValue(sheet,starRow,5,bo.getDanjia(),Cell.CELL_TYPE_STRING);
	       	 setSheetCellValue(sheet,starRow,6,bo.getJine(),Cell.CELL_TYPE_STRING);
	    	 setSheetCellValue(sheet,starRow,7,bo.getZhibaojin(),Cell.CELL_TYPE_STRING);
	    	 setSheetCellValue(sheet,starRow,8,bo.getZhuangxiefei(),Cell.CELL_TYPE_STRING);
	    	 setSheetCellValue(sheet,starRow,9,bo.getQrjhrq(),Cell.CELL_TYPE_STRING);
	    	 setSheetCellValue(sheet,starRow,10,bo.getPinzhongshuxing(),Cell.CELL_TYPE_STRING);
	    	 setSheetCellValue(sheet,starRow,11,bo.getBeizhu(),Cell.CELL_TYPE_STRING);
	    	 starRow++;
	     }
	}
	private void insertToRow(HSSFSheet sheet ,int starRow,int rows){
		
        sheet.shiftRows(starRow + 1, sheet.getLastRowNum(), rows,true,false);
        //Parameters:
        //startRow - the row to start shifting
        //endRow - the row to end shifting
        //n - the number of rows to shift
        //copyRowHeight - whether to copy the row height during the shift
        //resetOriginalRowHeight - whether to set the original row's height to the default
       
        starRow = starRow - 1;

        for (int i = 0; i < rows; i++) {
         HSSFRow sourceRow = null;
         HSSFRow targetRow = null;
         HSSFCell sourceCell = null;
         HSSFCell targetCell = null;
         short m;
         starRow = starRow + 1;
         sourceRow = sheet.getRow(starRow);
         targetRow = sheet.createRow(starRow + 1);
         targetRow.setHeight(sourceRow.getHeight());
 
         for (m = sourceRow.getFirstCellNum(); m < sourceRow.getLastCellNum(); m++) {
         sourceCell = sourceRow.getCell(m);
         targetCell = targetRow.createCell(m);
 
         //targetCell.setEncoding(sourceCell.getEncoding());
         if(sourceCell!=null){
         targetCell.setCellStyle(sourceCell.getCellStyle());
         targetCell.setCellType(sourceCell.getCellType());
        // targetCell.setCellValue(i);//設置值
         }
         }
        }
		
	}
	private void writeToResponse( HSSFWorkbook wb,HttpServletResponse response) throws IOException {
		ServletOutputStream out = response.getOutputStream();
		 out.flush();
		BufferedInputStream bis = null;
		BufferedOutputStream bos = null;
		try {
			ByteArrayOutputStream os = new ByteArrayOutputStream();
			wb.write(os);
			byte[] content = os.toByteArray();
			InputStream is = new ByteArrayInputStream(content);
			bis = new BufferedInputStream(is);
			bos = new BufferedOutputStream(out);
			byte[] buff = new byte[2048];
			int bytesRead;
			// Simple read/write loop.
			while (-1 != (bytesRead = bis.read(buff, 0, buff.length))) {
				bos.write(buff, 0, bytesRead);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (bis != null)
				bis.close();
			if (bos != null)
				bos.close();
		}
	}

	private void setResponseHeader( HttpServletResponse response,String outputnName) throws UnsupportedEncodingException{
		
		  response.setContentType("application/vnd.ms-excel;charset=utf-8");
		   response.setHeader("Content-Disposition", "attachment;filename="
				     + new String(outputnName.getBytes(), "iso-8859-1"));
	}
	
	public ActionForward exportylghd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		response.setContentType(CONTENT_TYPE);
		response.reset();
		String template = "shqd.xls";
		String outPutname = "原料订货单.xls";
		setResponseHeader(response, outPutname);
		String filePath = request.getSession().getServletContext()
				.getRealPath("")
				+ "/uploadfiles/reports/" + template;
		List list = (List) request.getSession().getAttribute("zhaobiaoList");
		System.out.println(list);
		try {
			HSSFWorkbook wb = getWb(filePath);
			writeShqd(wb,list);
			writeToResponse(wb,response);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}
}
